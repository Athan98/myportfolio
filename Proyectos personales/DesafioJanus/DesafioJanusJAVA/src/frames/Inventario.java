package frames;

import data.*;
import entidades.*;
import exportarExcel.Controlador;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

public class Inventario extends javax.swing.JInternalFrame {

    private final DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int fila, int col) {
            return false;
        }
    };

    private final ConexionBD con = new ConexionBD("jdbc:mariadb://localhost:3306/test", "root", "");
    private final StockData sd = new StockData(con);
    private final TipoProductoData tpd = new TipoProductoData(con);

    public Inventario() {
        initComponents();
        armarCabeceraTabla();
        actualizarLista();
        cargarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jlId = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtCodigo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jcCategoria = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jtNombre = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaDescripcion = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jtPrecio = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jtStock = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jrEstado = new javax.swing.JRadioButton();
        jbGuardar = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jbLimpiar = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jbAgregarCat = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtableBusqueda = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jtCampoBusqueda = new javax.swing.JTextField();
        jbEditar = new javax.swing.JButton();
        jbRetirar = new javax.swing.JButton();
        jbExportarExcel = new javax.swing.JButton();
        jPaneJanus = new Pane();

        setClosable(true);

        jPanel1.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.darcula.selection.color1"));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setForeground(javax.swing.UIManager.getDefaults().getColor("Button.darcula.selection.color1"));

        jLabel2.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("DATOS PRODUCTOS");

        jLabel3.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("ID :");

        jlId.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jlId.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlId.setText("-");

        jLabel4.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Codigo:");

        jtCodigo.setColumns(160);
        jtCodigo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtCodigoMouseClicked(evt);
            }
        });
        jtCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtCodigoKeyPressed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Categoria:");

        jLabel6.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Nombre:");

        jtNombre.setColumns(154);
        jtNombre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtNombreMouseClicked(evt);
            }
        });
        jtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtNombreKeyPressed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Precio ($):");

        jtaDescripcion.setColumns(20);
        jtaDescripcion.setRows(5);
        jScrollPane2.setViewportView(jtaDescripcion);

        jLabel8.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Descripcion:");

        jtPrecio.setColumns(141);
        jtPrecio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtPrecioMouseClicked(evt);
            }
        });
        jtPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtPrecioKeyPressed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Stock:");

        jtStock.setColumns(178);
        jtStock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtStockMouseClicked(evt);
            }
        });
        jtStock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtStockKeyPressed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Estado:");

        jrEstado.setText("(Disponibilidad)");

        jbGuardar.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jbGuardar.setText("GUARDAR");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/savedisk_floppydisk_guardar_1543.png"))); // NOI18N

        jbLimpiar.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jbLimpiar.setText("LIMPIAR CAMPOS");
        jbLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLimpiarActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/3792081-broom-halloween-magic-witch_109049.png"))); // NOI18N

        jbAgregarCat.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        jbAgregarCat.setText("Agregar categoria");
        jbAgregarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAgregarCatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbLimpiar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbAgregarCat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcCategoria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(jtStock, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(jtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(jtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(jrEstado))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jlId, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlId, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbAgregarCat, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrEstado)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbGuardar)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbLimpiar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        jPanel2.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.darcula.selection.color1"));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setForeground(javax.swing.UIManager.getDefaults().getColor("Button.darcula.selection.color1"));

        jtableBusqueda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtableBusqueda);

        jLabel1.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        jLabel1.setText("BUSCAR:");

        jtCampoBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtCampoBusquedaKeyReleased(evt);
            }
        });

        jbEditar.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jbEditar.setText("EDITAR");
        jbEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditarActionPerformed(evt);
            }
        });

        jbRetirar.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jbRetirar.setText("RETIRAR");
        jbRetirar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRetirarActionPerformed(evt);
            }
        });

        jbExportarExcel.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        jbExportarExcel.setText("EXPORTAR A EXCEL");
        jbExportarExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExportarExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addComponent(jbEditar)
                .addGap(18, 18, 18)
                .addComponent(jbRetirar)
                .addGap(18, 18, 18)
                .addComponent(jbExportarExcel)
                .addGap(0, 133, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtCampoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(149, 149, 149))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtCampoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbEditar)
                    .addComponent(jbRetirar)
                    .addComponent(jbExportarExcel))
                .addGap(27, 27, 27))
        );

        jPaneJanus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPaneJanusLayout = new javax.swing.GroupLayout(jPaneJanus);
        jPaneJanus.setLayout(jPaneJanusLayout);
        jPaneJanusLayout.setHorizontalGroup(
            jPaneJanusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPaneJanusLayout.setVerticalGroup(
            jPaneJanusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 94, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPaneJanus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPaneJanus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtCodigoKeyPressed
        if (Character.isDigit(evt.getKeyChar()) || (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE)) {
            jtCodigo.setEditable(true);
        } else {
            jtCodigo.setEditable(false);
        }

    }//GEN-LAST:event_jtCodigoKeyPressed

    private void jtNombreKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtNombreKeyPressed
        char x = evt.getKeyChar();
        if (Character.isLetter(x) || Character.isISOControl(x) || (evt.getKeyChar() == ' ')) {
            jtNombre.setEditable(true);
        } else {
            jtNombre.setEditable(false);
        }

    }//GEN-LAST:event_jtNombreKeyPressed

    private void jtStockKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtStockKeyPressed

        if (Character.isDigit(evt.getKeyChar()) || (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE)) {
            jtStock.setEditable(true);
        } else {
            jtStock.setEditable(false);
        }

    }//GEN-LAST:event_jtStockKeyPressed

    private void jtPrecioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtPrecioKeyPressed
        if (Character.isDigit(evt.getKeyChar()) || (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE) || (evt.getKeyChar() == ',')) {
            jtPrecio.setEditable(true);
        } else {
            jtPrecio.setEditable(false);
        }

    }//GEN-LAST:event_jtPrecioKeyPressed

    private void jtCampoBusquedaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtCampoBusquedaKeyReleased

        List<Stock> stockList = new ArrayList<>();

        stockList = sd.sp_ListarProductos();

        String campoBusq = jtCampoBusqueda.getText();

        String disponible = "Disponible";
        String noDisponible = "No disponible";

        borrarFilas();

        for (Stock s : stockList) {
            try {
                if ((s.getIdProducto().getNombre().toUpperCase()).startsWith(campoBusq.toUpperCase())
                        || s.getIdProducto().getCodigo().startsWith(campoBusq)
                        || s.getIdProducto().getIdTipoProducto().getCategoria().startsWith(campoBusq.toUpperCase())) {
                    if (s.getIdProducto().isEstado() == true) {
                        modelo.addRow(new Object[]{
                            s.getIdStock(),
                            s.getIdProducto().getCodigo(),
                            s.getIdProducto().getIdTipoProducto().getCategoria(),
                            s.getIdProducto().getNombre(),
                            s.getIdProducto().getPrecio(),
                            s.getCantidad(),
                            disponible
                        });
                    } else {
                        modelo.addRow(new Object[]{
                            s.getIdStock(),
                            s.getIdProducto().getCodigo(),
                            s.getIdProducto().getIdTipoProducto().getCategoria(),
                            s.getIdProducto().getNombre(),
                            s.getIdProducto().getPrecio(),
                            s.getCantidad(),
                            noDisponible
                        });
                    }
                }
            } catch (Exception ex) {
            }
        }
    }//GEN-LAST:event_jtCampoBusquedaKeyReleased

    private void jbEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarActionPerformed
        try {
            Stock s = new Stock();

            int idStock = (int) modelo.getValueAt(jtableBusqueda.getSelectedRow(), 0);

            s = sd.buscarProductoPorCodigo(idStock);

            jlId.setText(s.getIdStock() + "");
            jtCodigo.setText(s.getIdProducto().getCodigo());

            Object categoriaSeleccionada = modelo.getValueAt(jtableBusqueda.getSelectedRow(), 2);

            for (int i = 0; i < jcCategoria.getItemCount(); i++) {
                TipoProducto categoria = jcCategoria.getItemAt(i);
                if (categoria.getCategoria().equals(categoriaSeleccionada)) {
                    jcCategoria.setSelectedIndex(i);
                    break;
                }
            }

            jtNombre.setText(s.getIdProducto().getNombre());
            jtaDescripcion.setText(s.getIdProducto().getIdTipoProducto().getDescripcion());
            jtPrecio.setText(s.getIdProducto().getPrecio() + "");
            jtStock.setText(s.getCantidad() + "");
            jrEstado.setSelected(s.getIdProducto().isEstado());

            jtNombre.setText(s.getIdProducto().getNombre());
            jtaDescripcion.setText(s.getIdProducto().getIdTipoProducto().getDescripcion());
            jtPrecio.setText(s.getIdProducto().getPrecio() + "");
            jtStock.setText(s.getCantidad() + "");
            jrEstado.setSelected(s.getIdProducto().isEstado());
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una fila de la tabla");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "ERROR: " + ex.getMessage());
        }
    }//GEN-LAST:event_jbEditarActionPerformed

    private void jtCodigoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtCodigoMouseClicked
        jtCodigo.setEditable(true);
    }//GEN-LAST:event_jtCodigoMouseClicked

    private void jtNombreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtNombreMouseClicked
        jtNombre.setEditable(true);
    }//GEN-LAST:event_jtNombreMouseClicked

    private void jtPrecioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtPrecioMouseClicked
        jtPrecio.setEditable(true);
    }//GEN-LAST:event_jtPrecioMouseClicked

    private void jtStockMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtStockMouseClicked
        jtStock.setEditable(true);
    }//GEN-LAST:event_jtStockMouseClicked

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed

        Producto prod;
        Stock s;
        TipoProducto tp;

        if (jtCodigo.getText().isEmpty() || jtNombre.getText().isEmpty() || jtPrecio.getText().isEmpty() || jtStock.getText().isEmpty() || jcCategoria.getSelectedIndex() == -1 || (Double.parseDouble(jtPrecio.getText()) <= 0) || (Integer.parseInt(jtStock.getText()) <= 0)) {
            JOptionPane.showMessageDialog(this, "Por favor, complete los datos requeridos correctamente");
        } else {

            if (jlId.getText().equals("-")) {

                String mensaje = "<html>VERIFIQUE LOS DATOS INGRESADOS<br>"
                        + "Código: " + jtCodigo.getText() + "<br>"
                        + "Categoría: " + jcCategoria.getSelectedItem().toString() + "<br>"
                        + "Nombre: " + jtNombre.getText() + "<br>"
                        + "Precio: " + jtPrecio.getText() + "<br>"
                        + "Stock: " + jtStock.getText() + "<br>"
                        + "¿Son correctos?</html>";

                int respuesta = JOptionPane.showConfirmDialog(this, mensaje, "Confirmación", JOptionPane.YES_NO_OPTION);

                if (respuesta == JOptionPane.YES_OPTION) {

                    tp = new TipoProducto();
                    tp.setCategoria(jcCategoria.getSelectedItem().toString());
                    tp.setDescripcion(jtaDescripcion.getText());
                    tpd.agregarTipoProducto(tp);

                    prod = new Producto();
                    prod.setIdTipoProducto(tp);
                    prod.setCodigo(jtCodigo.getText());
                    prod.setNombre(jtNombre.getText());
                    prod.setPrecio(Double.parseDouble(jtPrecio.getText()));

                    s = new Stock();
                    s.setIdProducto(prod);
                    s.setCantidad(Integer.parseInt(jtStock.getText()));

                    sd.sp_InsertarProducto(prod, Integer.parseInt(jtStock.getText()));
                    //Actualizar tabla
                    borrarFilas();
                    actualizarLista();

                    //Limpiado de campos automatico
                    jlId.setText("-");
                    jtCodigo.setText("");
                    jcCategoria.setSelectedIndex(-1);
                    jtNombre.setText("");
                    jtaDescripcion.setText("");
                    jtPrecio.setText("");
                    jtStock.setText("");
                    jrEstado.setSelected(false);
                }

            } else {
                tp = new TipoProducto();
                prod = new Producto();
                s = new Stock();
                tp.setCategoria(jcCategoria.getSelectedItem().toString());
                tp.setDescripcion(jtaDescripcion.getText());

                prod.setIdTipoProducto(tp);
                prod.setCodigo(jtCodigo.getText());
                prod.setNombre(jtNombre.getText());
                prod.setPrecio(Double.parseDouble(jtPrecio.getText()));
                prod.setEstado(jrEstado.isSelected());

                s.setIdProducto(prod);
                s.setCantidad(Integer.parseInt(jtStock.getText()));
                s.setIdStock(Integer.parseInt(jlId.getText()));
                sd.sp_ModificarProducto(prod, tp, s);

                //Actualizar tabla
                borrarFilas();
                actualizarLista();

                //Limpiado de campos automatico
                jlId.setText("-");
                jtCodigo.setText("");
                jcCategoria.setSelectedIndex(-1);
                jtNombre.setText("");
                jtaDescripcion.setText("");
                jtPrecio.setText("");
                jtStock.setText("");
                jrEstado.setSelected(false);
            }
        }
    }//GEN-LAST:event_jbGuardarActionPerformed

    private void jbAgregarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAgregarCatActionPerformed
        NuevaCategoria nc = new NuevaCategoria(this);
        nc.setVisible(true);
        Principal.escPane.add(nc);
        Principal.escPane.moveToFront(nc);
        nc.setLocation((Principal.escPane.getWidth() - nc.getWidth()) / 2, (Principal.escPane.getHeight() - nc.getHeight()) / 2);
    }//GEN-LAST:event_jbAgregarCatActionPerformed

    private void jbLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLimpiarActionPerformed
        jlId.setText("-");
        jtCodigo.setText("");
        jcCategoria.setSelectedIndex(-1);
        jtNombre.setText("");
        jtaDescripcion.setText("");
        jtPrecio.setText("");
        jtStock.setText("");
        jrEstado.setSelected(false);
    }//GEN-LAST:event_jbLimpiarActionPerformed

    private void jbRetirarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRetirarActionPerformed

        try {
            try {

                int idStock = (int) modelo.getValueAt(jtableBusqueda.getSelectedRow(), 0);

                Stock s = sd.buscarProductoPorCodigo(idStock);

                TipoProducto tp = new TipoProducto(s.getIdProducto().getIdTipoProducto().getIdTipoProducto(), s.getIdProducto().getIdTipoProducto().getDescripcion(), s.getIdProducto().getIdTipoProducto().getCategoria());
                Producto prod = new Producto(s.getIdProducto().getIdProducto(), tp, s.getIdProducto().getCodigo(), s.getIdProducto().getNombre(), s.getIdProducto().getPrecio(), s.getIdProducto().isEstado());
                Stock stock = new Stock(s.getIdStock(), prod, s.getCantidad());

                String entrada = JOptionPane.showInputDialog(this, "Ingrese la cantidad a retirar");
                int existRetiradas = Integer.parseInt(entrada);
                if (existRetiradas > 0 && stock.getCantidad() >= existRetiradas) {
                    stock.setCantidad(stock.getCantidad() - existRetiradas);
                    sd.sp_ModificarProducto(prod, tp, stock);
                    jlId.setText("-");
                    jtCodigo.setText("");
                    jcCategoria.setSelectedIndex(-1);
                    jtNombre.setText("");
                    jtaDescripcion.setText("");
                    jtPrecio.setText("");
                    jtStock.setText("");
                    jrEstado.setSelected(false);
                    borrarFilas();
                    actualizarLista();
                } else {
                    JOptionPane.showMessageDialog(this, "No se puede retirar esa cantidad de productos");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "La entrada no es un número entero válido.");
            }
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una fila de la tabla");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "ERROR: " + ex.getMessage());
        }
    }//GEN-LAST:event_jbRetirarActionPerformed

    private void jbExportarExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExportarExcelActionPerformed
        Controlador obj;
        try {
            obj = new Controlador();
            obj.exportarExcel(jtableBusqueda);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error de archivo");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "ERROR: " + ex.getMessage());
        }

    }//GEN-LAST:event_jbExportarExcelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPaneJanus;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbAgregarCat;
    private javax.swing.JButton jbEditar;
    private javax.swing.JButton jbExportarExcel;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JButton jbLimpiar;
    private javax.swing.JButton jbRetirar;
    private javax.swing.JComboBox<TipoProducto> jcCategoria;
    private javax.swing.JLabel jlId;
    private javax.swing.JRadioButton jrEstado;
    private javax.swing.JTextField jtCampoBusqueda;
    private javax.swing.JTextField jtCodigo;
    private javax.swing.JTextField jtNombre;
    private javax.swing.JTextField jtPrecio;
    private javax.swing.JTextField jtStock;
    private javax.swing.JTextArea jtaDescripcion;
    private javax.swing.JTable jtableBusqueda;
    // End of variables declaration//GEN-END:variables

    public void borrarFilas() {
        int f = modelo.getRowCount() - 1;
        for (; f >= 0; f--) {
            modelo.removeRow(f);
        }
    }

    private void armarCabeceraTabla() {

        modelo.setColumnCount(0);

        modelo.addColumn("ID Stock");
        modelo.addColumn("Codigo");
        modelo.addColumn("Categoria");
        modelo.addColumn("Nombre");
        modelo.addColumn("Precio ($)");
        modelo.addColumn("Existencias");
        modelo.addColumn("Estado");

        jtableBusqueda.setModel(modelo);
    }

    public void actualizarLista() {

        modelo.setRowCount(0);

        List<Stock> stockList = new ArrayList<>();

        stockList = sd.sp_ListarProductos();

        String disponible = "Disponible";
        String noDisponible = "No disponible";

        for (Stock s : stockList) {

            if (s.getIdProducto().isEstado() == true) {
                modelo.addRow(new Object[]{
                    s.getIdStock(),
                    s.getIdProducto().getCodigo(),
                    s.getIdProducto().getIdTipoProducto().getCategoria(),
                    s.getIdProducto().getNombre(),
                    s.getIdProducto().getPrecio(),
                    s.getCantidad(),
                    disponible
                });
            } else {
                modelo.addRow(new Object[]{
                    s.getIdStock(),
                    s.getIdProducto().getCodigo(),
                    s.getIdProducto().getIdTipoProducto().getCategoria(),
                    s.getIdProducto().getNombre(),
                    s.getIdProducto().getPrecio(),
                    s.getCantidad(),
                    noDisponible
                });
            }
        }
    }

    public void cargarCombo() {
        jcCategoria.removeAllItems();

        List<TipoProducto> tiposProdList = new ArrayList<>();
        tiposProdList = tpd.listarTiposProductos();

        Set<String> categoriasAgregadas = new HashSet<>();

        for (TipoProducto tp : tiposProdList) {
            String categoria = tp.getCategoria();
            if (!categoriasAgregadas.contains(categoria)) {
                jcCategoria.addItem(tp);
                categoriasAgregadas.add(categoria); // Agregar la categoría al conjunto.
            }
        }

        jcCategoria.setSelectedIndex(-1);

    }

    public class Pane extends JPanel {

        private Image imagen;

        @Override
        public void paint(Graphics g) {

            imagen = new ImageIcon(getClass().getResource("/images/janusFondo.jpg")).getImage();

            g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);

            setOpaque(false);

            super.paint(g);
        }
    }
}
